variable,level,nmdbioticv3,nmdbioticv1.4,icesBiotic,key
CruiseKey,Cruise,CruiseKey,CruiseKey,CruiseKey,Y
Platform,Cruise,platform,platform,Platform,
CruiseKey,Station,CruiseKey,CruiseKey,CruiseKey,Y
StationKey,Station,StationKey,StationKey,StationKey,Y
Station,Station,"paste0(CruiseKey, '/', StationKey)","paste0(CruiseKey, '/', StationKey)","paste0(CruiseKey, '/', StationKey)",
CatchPlatform,Station,catchplatform,platform,Platform,
DateTime,Station,"as.POSIXct(paste0(stationstartdate, stationstarttime), format='%Y-%m-%dZ%H:%M:%OSZ', tz='GMT')","as.POSIXct(paste0(startdate.fishstation, starttime), format='%Y-%m-%dZ%H:%M:%OSZ', tz='GMT')",StartTime,
Latitude,Station,latitudestart,latitudestart,StartLatitude,
Longitude,Station,longitudestart,longitudestart,StartLongitude,
BottomDepth,Station,(bottomdepthstart + bottomdepthstop)/2,(bottomdepthstart + bottomdepthstop)/2,BottomDepth,
CruiseKey,Haul,CruiseKey,CruiseKey,CruiseKey,Y
StationKey,Haul,StationKey,StationKey,StationKey,Y
HaulKey,Haul,HaulKey,HaulKey,HaulKey,Y
Haul,Haul,"paste0(CruiseKey, '/', HaulKey)","paste0(CruiseKey, '/', HaulKey)","paste0(CruiseKey, '/', HaulKey)",
Gear,Haul,gear,gear,Gear,
TowedDistance,Haul,distance,distance,Distance,
EffectiveTowedDistance,Haul,TowedDistance,TowedDistance,TowedDistance,
MinHaulDepth,Haul,fishingdepthmin,fishingdepthmin,MinTrawlDepth,
MaxHaulDepth,Haul,fishingdepthmax,fishingdepthmax,MaxTrawlDepth,
VerticalNetOpening,Haul,verticaltrawlopening,trawlopening,Netopening,
HorizontalNetOpening,Haul,wingspread,"as.numeric(NA)",WingSpread,
TrawlDoorSpread,Haul,trawldoorspread,doorspread,DoorSpread,
CruiseKey,SpeciesCategory,CruiseKey,CruiseKey,CruiseKey,Y
StationKey,SpeciesCategory,StationKey,StationKey,StationKey,Y
HaulKey,SpeciesCategory,HaulKey,HaulKey,HaulKey,Y
SpeciesCategoryKey,SpeciesCategory,SpeciesCategoryKey,SpeciesCategoryKey,SpeciesCategoryKey,Y
SpeciesCategory,SpeciesCategory,SpeciesCategoryKey,SpeciesCategoryKey,SpeciesCategoryKey,
CruiseKey,Sample,CruiseKey,CruiseKey,CruiseKey,Y
StationKey,Sample,StationKey,StationKey,StationKey,Y
HaulKey,Sample,HaulKey,HaulKey,HaulKey,Y
SpeciesCategoryKey,Sample,SpeciesCategoryKey,SpeciesCategoryKey,SpeciesCategoryKey,Y
SampleKey,Sample,SampleKey,SampleKey,SampleKey,Y
CatchFractionWeightKilogram,Sample,"ifelse(catchproducttype == 1, catchweight, NA)","ifelse(producttype == 1, weight, NA)","SpeciesCategoryWeight * convertWt(WeightUnit, 'kg')",
CatchFractionCount,Sample,catchcount,count,SpeciesCategoryNumber,
SampleWeightKilogram,Sample,"ifelse(sampleproducttype == 1, lengthsampleweight, NA)","ifelse(sampleproducttype == 1, lengthsampleweight, NA)","SubsampleWeight * convertWt(WeightUnit, 'kg')",
SampleCount,Sample,lengthsamplecount,lengthsamplecount,SubsampledNumber,
CruiseKey,Individual,CruiseKey,CruiseKey,CruiseKey,Y
StationKey,Individual,StationKey,StationKey,StationKey,Y
HaulKey,Individual,HaulKey,HaulKey,HaulKey,Y
SpeciesCategoryKey,Individual,SpeciesCategoryKey,SpeciesCategoryKey,SpeciesCategoryKey,Y
SampleKey,Individual,SampleKey,SampleKey,SampleKey,Y
IndividualKey,Individual,IndividualKey,IndividualKey,IndividualKey,Y
IndividualRoundWeightGram,Individual,"ifelse(individualproducttype == 1, individualweight * 1000, NA)","ifelse(producttype.individual == 1, weight.individual * 1000, NA)","IndividualWeight * convertWt(WeightUnit.Biology, 'gr')",
IndividualTotalLengthCentimeter,Individual,"ifelse(lengthmeasurement == 'E', length * 100, NA)","ifelse(lengthmeasurement == 'E', length * 100, NA)","LengthClass.Biology * convertLen(LengthCode.Biology, 'cm')",
LengthResolutionCentimeter,Individual,"convertLenRes(lengthresolution)","convertLenRes(lengthunit)",convertLenRes(LengthCode.Biology),
WeightMeasurement,Individual,"'IndividualWeight'","'IndividualWeight'","ifelse(WeightMeasurement,  'IndividualWeight', 'AverageWeight')",
IndividualAge,Individual,age,age,IndividualAge,
IndividualSex,Individual,"ifelse(sex == 1, 'F', ifelse(sex == 2, 'M', NA))","ifelse(sex == 1, 'F', ifelse(sex == 2, 'M', NA))","ifelse(substr(IndividualSex, nchar(IndividualSex), nchar(IndividualSex)) == 'F', 'F', ifelse(substr(IndividualSex, nchar(IndividualSex), nchar(IndividualSex)) == 'M', 'M', NA))",
